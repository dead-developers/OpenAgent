# app/knowledge/embedding.py

from sentence_transformers import SentenceTransformer
from typing import List, Union, Any
from app.logger import logger

class EmbeddingGenerator:
    """Generates embeddings for text data using SentenceTransformer."""

    def __init__(self, model_name: str = "all-MiniLM-L6-v2"):
        """
        Initializes the EmbeddingGenerator with a specified SentenceTransformer model.

        Args:
            model_name (str): The name of the SentenceTransformer model to use.
                              Defaults to "all-MiniLM-L6-v2".
        """
        try:
            self.model = SentenceTransformer(model_name)
            logger.info(f"EmbeddingGenerator initialized with model: {model_name}")
        except Exception as e:
            logger.error(f"Failed to load SentenceTransformer model {model_name}: {e}")
            # Fallback or raise an error if critical
            # For now, let's try a common alternative or allow it to fail if SentenceTransformer is not installed
            try:
                logger.warning(f"Falling back to default SentenceTransformer model due to error.")
                self.model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2") # Explicitly use a known good model
            except Exception as fallback_e:
                logger.error(f"Fallback model also failed to load: {fallback_e}")
                raise RuntimeError(f"Could not initialize EmbeddingGenerator: {fallback_e}")

    def generate(self, data: Union[str, List[str]]) -> Union[List[float], List[List[float]]]:
        """
        Generates embeddings for the given data.

        Args:
            data (Union[str, List[str]]): A single string or a list of strings to embed.

        Returns:
            Union[List[float], List[List[float]]]: A single embedding (list of floats)
            if input is a single string, or a list of embeddings if input is a list of strings.
        """
        if not data:
            logger.warning("EmbeddingGenerator received empty data.")
            return []

        try:
            embeddings = self.model.encode(data)
            # Convert numpy arrays to lists of floats for easier serialization/storage
            if isinstance(data, str):
                return embeddings.tolist()
            return [emb.tolist() for emb in embeddings]
        except Exception as e:
            logger.error(f"Error generating embeddings: {e}")
            # Depending on desired robustness, could return empty list or re-raise
            return [] if isinstance(data, str) else [[] for _ in data] if isinstance(data, list) else []

    def get_embedding_dimension(self) -> int:
        """
        Returns the dimension of the embeddings generated by the model.

        Returns:
            int: The embedding dimension.
        """
        try:
            return self.model.get_sentence_embedding_dimension()
        except Exception as e:
            logger.error(f"Error getting embedding dimension: {e}")
            # Attempt to get it from a dummy encoding if the direct method fails
            try:
                dummy_embedding = self.model.encode("test")
                return len(dummy_embedding)
            except Exception as e2:
                logger.error(f"Could not determine embedding dimension: {e2}")
                return 0 # Or raise an error

# Example usage (for testing purposes)
if __name__ == "__main__":
    try:
        generator = EmbeddingGenerator()
        print(f"Embedding dimension: {generator.get_embedding_dimension()}")

        text_single = "This is a test sentence."
        embedding_single = generator.generate(text_single)
        print(f"Embedding for single sentence (first 5 dims): {embedding_single[:5]}")
        print(f"Length of single embedding: {len(embedding_single)}")

        texts_multiple = [
            "Another test sentence.",
            "And a third one for good measure."
        ]
        embeddings_multiple = generator.generate(texts_multiple)
        if embeddings_multiple and embeddings_multiple[0]:
             print(f"Embedding for first of multiple sentences (first 5 dims): {embeddings_multiple[0][:5]}")
             print(f"Number of embeddings: {len(embeddings_multiple)}")
             print(f"Length of first embedding in multiple: {len(embeddings_multiple[0])}")
        else:
            print("Failed to generate multiple embeddings or embeddings are empty.")

    except RuntimeError as e:
        print(f"Could not run example: {e}")
    except Exception as e:
        print(f"An unexpected error occurred during example: {e}")


